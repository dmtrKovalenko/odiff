name: Build

on: [push]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest]
    steps:
      - uses: actions/checkout@v2.3.2
      - shell: bash
        run: rm -rf $(which pkg-config)

      - uses: actions/setup-node@v4
        with:
          node-version: "20"

      - uses: lukka/get-cmake@latest
      - name: Setup anew (or from cache) vcpkg (and does not build any package)
        uses: lukka/run-vcpkg@v11
        env:
          VCPKG_DEFAULT_TRIPLET: x64-mingw-static
          VCPKG_DEFAULT_HOST_TRIPLET: x64-mingw-static
        with:
          runVcpkgInstall: true
          runVcpkgFormatString: '["install", "--clean-after-build"]'

      - run: vcpkg install

      - name: Set pkg-config path on Unix
        if: runner.os != 'Windows'
        run: |
          ls "${GITHUB_WORKSPACE}/vcpkg_installed/${VCPKG_DEFAULT_TRIPLET}/lib/pkgconfig"
          echo "PKG_CONFIG_PATH=${GITHUB_WORKSPACE}/vcpkg_installed/${VCPKG_DEFAULT_TRIPLET}/lib/pkgconfig" >> $GITHUB_ENV

      - name: Set pkg-config path on Unix
        shell: bash
        if: runner.os  == 'Windows'
        run: |
          echo "PKG_CONFIG_PATH=${GITHUB_WORKSPACE}\vcpkg_installed\\${VCPKG_DEFAULT_TRIPLET}\lib\pkgconfig" >> $GITHUB_ENV

      - run: |
          choco install pkgconfiglite

      - shell: bash
        run: |
          echo "LIBPNG_CFLAGS=$(pkg-config --cflags libspng_static)" >> $GITHUB_ENV
          echo "LIBPNG_LIBS=$(pkg-config --libs libspng_static)" >> $GITHUB_ENV
          echo "LIBTIFF_LIBS=$(pkg-config --libs libtiff-4)" >> $GITHUB_ENV
          echo "LIBTIFF_CFLAGS=$(pkg-config --cflags libtiff-4)" >> $GITHUB_ENV
          echo "LIBJPEG_CFLAGS=$(pkg-config --cflags libturbojpeg)" >> $GITHUB_ENV
          echo "LIBJPEG_LIBS=$(pkg-config --libs libturbojpeg)" >> $GITHUB_ENV

      - uses: ocaml/setup-ocaml@v3
        with:
          opam-repositories: "default:https://github.com/fdopen/opam-repository-mingw.git#opam2"
          ocaml-compiler: "ocaml-variants.4.07.1+mingw64"
          opam-disable-sandboxing: true
          dune-cache: true

      - name: Install deps & build
        run: opam install .  --with-test

      - run: opam exec -- dune build --verbose

      - name: Test
        run: esy test

      - name: Test node bindings
        run: esy test-js

      - name: Test ts declaration
        run: esy test-ts

      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: orange_diff_generated
          path: test/test-images
