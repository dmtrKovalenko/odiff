name: Build

on: [push]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    continue-on-error: true
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            ocaml-compiler: "5.2.0"
            triplet: "x64-linux"
          - os: windows-latest
            ocaml-compiler: "5.2.0"
            triplet: "x64-mingw-static"
          - os: windows-latest
            ocaml-compiler: "arch-x86_64,system-mingw,ocaml.5.2.0"
            triplet: "x64-mingw-static"
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v2.3.2

      - if: runner.os == 'Windows'
        run: |
          rm -rf $(which pkg-config)
          choco install pkgconfiglite

      - run: gcc --version

      - uses: lukka/get-cmake@latest
      - name: Setup anew (or from cache) vcpkg (and does not build any package)
        uses: lukka/run-vcpkg@v11
        env:
          VCPKG_DEFAULT_TRIPLET: ${{ matrix.triplet }}
          VCPKG_DEFAULT_HOST_TRIPLET: ${{ matrix.triplet }}
        with:
          runVcpkgInstall: true
          runVcpkgFormatString: '["install", "--clean-after-build"]'

      - name: Set pkg-config path on Unix
        if: runner.os != 'Windows'
        run: |
          ls "${GITHUB_WORKSPACE}/vcpkg_installed/${VCPKG_DEFAULT_TRIPLET}/lib/pkgconfig"
          echo "PKG_CONFIG_PATH=${GITHUB_WORKSPACE}/vcpkg_installed/${VCPKG_DEFAULT_TRIPLET}/lib/pkgconfig" >> $GITHUB_ENV

      - name: Set pkg-config path on Unix
        shell: bash
        if: runner.os  == 'Windows'
        run: |
          echo "PKG_CONFIG_PATH=${GITHUB_WORKSPACE}\vcpkg_installed\\${VCPKG_DEFAULT_TRIPLET}\lib\pkgconfig" >> $GITHUB_ENV

      - shell: bash
        run: |
          echo "LIBPNG_CFLAGS=$(pkg-config --cflags libspng_static)" >> $GITHUB_ENV
          echo "LIBPNG_LIBS=$(pkg-config --libs libspng_static)" >> $GITHUB_ENV
          echo "LIBTIFF_LIBS=$(pkg-config --libs libtiff-4)" >> $GITHUB_ENV
          echo "LIBTIFF_CFLAGS=$(pkg-config --cflags libtiff-4)" >> $GITHUB_ENV
          echo "LIBJPEG_CFLAGS=$(pkg-config --cflags libturbojpeg)" >> $GITHUB_ENV
          echo "LIBJPEG_LIBS=$(pkg-config --libs libturbojpeg)" >> $GITHUB_ENV

      - uses: ocaml/setup-ocaml@v3
        with:
          ocaml-compiler: ${{ matrix.ocaml-compiler }}
          opam-disable-sandboxing: true
          dune-cache: false

      - run: opam exec -- opam install . --deps-only

      - name: Install deps & build
        run: opam exec -- dune build --verbose

