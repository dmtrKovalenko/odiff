name: Build
on:
  pull_request:
  push:
    branches:
      - main
    tags:
      - "v*.*.*"

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Zig
        uses: mlugg/setup-zig@v2
        with:
          version: 0.15.1

      - name: Install nasm
        run: |
          sudo apt-get update
          sudo apt-get install -y nasm

      - name: Cross-compile for all targets
        run: |
          zig build -Doptimize=ReleaseFast ci --verbose

      - name: Upload x86_64-linux artifact
        uses: actions/upload-artifact@v4
        with:
          if-no-files-found: error
          name: odiff-linux-x64
          path: zig-out/x86_64-linux/odiff
          retention-days: 14

      - name: Upload aarch64-linux artifact
        uses: actions/upload-artifact@v4
        with:
          if-no-files-found: error
          name: odiff-linux-arm64
          path: zig-out/aarch64-linux/odiff
          retention-days: 14

      - name: Upload x86_64-windows artifact
        uses: actions/upload-artifact@v4
        with:
          if-no-files-found: error
          name: odiff-windows-x64.exe
          path: zig-out/x86_64-windows/odiff.exe
          retention-days: 14

      - name: Upload aarch64-windows artifact
        uses: actions/upload-artifact@v4
        with:
          if-no-files-found: error
          name: odiff-windows-arm64.exe
          path: zig-out/aarch64-windows/odiff.exe
          retention-days: 14

      - name: Upload x86_64-macos artifact
        uses: actions/upload-artifact@v4
        with:
          if-no-files-found: error
          name: odiff-macos-x64
          path: zig-out/x86_64-macos/odiff
          retention-days: 14

      - name: Upload aarch64-macos artifact
        uses: actions/upload-artifact@v4
        with:
          if-no-files-found: error
          name: odiff-macos-arm64
          path: zig-out/aarch64-macos/odiff
          retention-days: 14

  test:
    name: Run Tests (all targets)
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - target: x86_64-linux-gnu
            os: ubuntu-latest
            run_tests: true
          - target: aarch64-linux-gnu
            os: ubuntu-24.04-arm64
            run_tests: true
          - target: x86_64-windows-gnu
            os: windows-latest
            run_tests: true
          - target: aarch64-windows-gnu
            os: windows-latest
            run_tests: false
          - target: aarch64-macos
            os: macos-latest
            run_tests: true
          - target: x86_64-macos
            os: macos-13
            run_tests: true
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Zig
        uses: goto-bus-stop/setup-zig@v2
        with:
          version: 0.15.1

      - name: Install nasm for x86 targets (Linux)
        if: contains(matrix.target, 'x86_64') && runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y nasm

      - name: Install nasm for x86 targets (macOS)
        if: contains(matrix.target, 'x86_64') && runner.os == 'macOS'
        run: |
          brew install nasm

      - name: Install nasm for x86 targets (Windows)
        if: contains(matrix.target, 'x86_64') && runner.os == 'Windows'
        run: |
          choco install -y nasm

      - name: Run tests
        if: matrix.run_tests == true
        run: |
          zig build test-all --summary all

      - name: Skip (runner not available)
        if: matrix.run_tests != true
        run: |
          echo "Skipping: no hosted runner available for ${{ matrix.target }}"

  spellcheck:
    name: Spell check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run typos
        uses: crate-ci/typos@master
        with:
          config: ./typos.toml

  publish:
    name: Publish release
    needs: [build, test]
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Download built binaries
        uses: actions/download-artifact@v4
        with:
          pattern: odiff-*
          merge-multiple: true
          path: npm_package/raw_binaries

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          always-auth: true
          registry-url: "https://registry.npmjs.org"
          cache-dependency-path: "package-lock.json"

      - name: Publish npm package
        working-directory: npm_package
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Create github release
        uses: softprops/action-gh-release@v1
        with:
          files: "npm_package/raw_binaries/*"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
